# Version: 1.0.0 (Using https://semver.org/)
# Updated: 26-09-2022
# See http://EditorConfig.org for more information about .editorconfig files.
# See https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/code-style-rule-options for code style rule options.

root = true

# Default settings
[*]
charset = utf-8
indent_style = space
insert_final_newline = false
trim_trailing_whitespace = true

[*.cs]
indent_size = 4

# New line preferences
csharp_new_line_before_open_brace = all
csharp_new_line_before_else = true
csharp_new_line_before_catch = true
csharp_new_line_before_finally = true
csharp_new_line_before_members_in_object_initializers = true
csharp_new_line_before_members_in_anonymous_types = true
csharp_new_line_between_query_expression_clauses = true

# Indentation preferences
csharp_indent_block_contents = true
csharp_indent_braces = false
csharp_indent_case_contents = true
csharp_indent_case_contents_when_block = false
csharp_indent_switch_labels = true
csharp_indent_labels = one_less_than_current

# Space preferences
csharp_space_after_cast = false
csharp_space_after_colon_in_inheritance_clause = true
csharp_space_after_comma = true
csharp_space_after_dot = false
csharp_space_after_keywords_in_control_flow_statements = true
csharp_space_after_semicolon_in_for_statement = true
csharp_space_around_binary_operators = before_and_after
csharp_space_around_declaration_statements = false
csharp_space_before_colon_in_inheritance_clause = true
csharp_space_before_comma = false
csharp_space_before_dot = false
csharp_space_before_open_square_brackets = false
csharp_space_before_semicolon_in_for_statement = false
csharp_space_between_empty_square_brackets = false
csharp_space_between_method_call_empty_parameter_list_parentheses = false
csharp_space_between_method_call_name_and_opening_parenthesis = false
csharp_space_between_method_call_parameter_list_parentheses = false
csharp_space_between_method_declaration_empty_parameter_list_parentheses = false
csharp_space_between_method_declaration_name_and_open_parenthesis = false
csharp_space_between_method_declaration_parameter_list_parentheses = false
csharp_space_between_parentheses = false
csharp_space_between_square_brackets = false

# Sort using and Import directives with System.* appearing first
dotnet_sort_system_directives_first = true
csharp_using_directive_placement = inside_namespace:none

# Avoid this. unless absolutely necessary
dotnet_style_qualification_for_field = false:suggestion
dotnet_style_qualification_for_property = false:suggestion
dotnet_style_qualification_for_method = false:suggestion
dotnet_style_qualification_for_event = false:suggestion

# Use language keywords where applicable;
dotnet_style_predefined_type_for_locals_parameters_members = true:suggestion
dotnet_style_predefined_type_for_member_access = true:suggestion

# Prefer "var" only where type is obvious; disable diagnostics since no firm policy is in place yet
csharp_style_var_for_built_in_types = true:none
csharp_style_var_when_type_is_apparent = true:suggestion
csharp_style_var_elsewhere = false:none

# Naming Style
# Name all constant fields using PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_rule.constants_should_be_pascal_case.style = constant_style
dotnet_naming_rule.constants_should_be_pascal_case.severity = suggestion
dotnet_naming_rule.constants_should_be_pascal_case.symbols = constants

dotnet_naming_symbols.constants.applicable_kinds = field, local
dotnet_naming_symbols.constants.required_modifiers = const

dotnet_naming_style.constant_style.capitalization = pascal_case

# All public/internal/protected_internal/protected/private static readonly fields must be PascalCase
# https://docs.microsoft.com/dotnet/standard/design-guidelines/field
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.style = pascal_case_style
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.severity = warning
dotnet_naming_rule.public_protected_static_readonly_fields_must_be_pascal_case_rule.symbols = static_readonly_fields

dotnet_naming_symbols.static_readonly_fields.applicable_accessibilities = public, protected, protected_internal, internal, private
dotnet_naming_symbols.static_readonly_fields.applicable_kinds = field
dotnet_naming_symbols.static_readonly_fields.required_modifiers = static, readonly

dotnet_naming_style.pascal_case_style.capitalization = pascal_case

# Internal and private fields should be _camelCase
dotnet_naming_rule.camel_case_for_private_internal_fields.style = camel_case_underscore_style
dotnet_naming_rule.camel_case_for_private_internal_fields.severity = warning
dotnet_naming_rule.camel_case_for_private_internal_fields.symbols  = private_internal_fields

dotnet_naming_symbols.private_internal_fields.applicable_accessibilities = private, internal
dotnet_naming_symbols.private_internal_fields.applicable_kinds = field

dotnet_naming_style.camel_case_underscore_style.required_prefix = _
dotnet_naming_style.camel_case_underscore_style.capitalization = camel_case

# Interfaces use PascalCase and are prefixed with uppercase 'I'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_style.interface_style.capitalization = pascal_case
dotnet_naming_style.interface_style.required_prefix = I
dotnet_naming_symbols.interface_symbol.applicable_accessibilities = *
dotnet_naming_symbols.interface_symbol.applicable_kinds = interface

dotnet_naming_rule.interface_naming.style = interface_style
dotnet_naming_rule.interface_naming.severity = warning
dotnet_naming_rule.interface_naming.symbols = interface_symbol

# Generics Type Parameters use PascalCase and are prefixed with uppercase 'T'
# https://docs.microsoft.com/dotnet/standard/design-guidelines/names-of-classes-structs-and-interfaces
dotnet_naming_style.type_parameter_style.capitalization = pascal_case
dotnet_naming_style.type_parameter_style.required_prefix = T
dotnet_naming_symbols.type_parameter_symbol.applicable_accessibilities = *
dotnet_naming_symbols.type_parameter_symbol.applicable_kinds = type_parameter

dotnet_naming_rule.type_parameter_rule.style = type_parameter_style
dotnet_naming_rule.type_parameter_rule.severity = warning
dotnet_naming_rule.type_parameter_rule.symbols = type_parameter_symbol

# Modifier preferences
csharp_preferred_modifier_order = public,private,protected,internal,static,extern,new,virtual,abstract,sealed,override,readonly,unsafe,volatile,async:warning
dotnet_style_require_accessibility_modifiers = always:warning
dotnet_style_readonly_field = true:suggestion

# Expression-level preferences
dotnet_style_object_initializer = true:suggestion
dotnet_style_collection_initializer = true:suggestion
dotnet_style_explicit_tuple_names = true:suggestion
dotnet_style_coalesce_expression = true:suggestion
dotnet_style_null_propagation = true:suggestion
dotnet_style_prefer_is_null_check_over_reference_equality_method = true:suggestion
dotnet_style_prefer_inferred_tuple_names = true:suggestion
dotnet_style_prefer_inferred_anonymous_type_member_names = true:suggestion
dotnet_style_prefer_auto_properties = true:suggestion
dotnet_style_prefer_conditional_expression_over_assignment = true:suggestion
dotnet_style_prefer_conditional_expression_over_return = true:suggestion
csharp_prefer_simple_default_expression = true:suggestion

# Expression-bodied members
csharp_style_expression_bodied_methods = true:suggestion
csharp_style_expression_bodied_constructors = true:suggestion
csharp_style_expression_bodied_operators = true:suggestion
csharp_style_expression_bodied_properties = true:suggestion
csharp_style_expression_bodied_indexers = true:suggestion
csharp_style_expression_bodied_accessors = true:suggestion
csharp_style_expression_bodied_lambdas = true:suggestion
csharp_style_expression_bodied_local_functions = true:suggestion

# Pattern matching
csharp_style_pattern_matching_over_is_with_cast_check = true:suggestion
csharp_style_pattern_matching_over_as_with_null_check = true:suggestion
csharp_style_inlined_variable_declaration = true:suggestion

# Null checking preferences
csharp_style_throw_expression = true:suggestion
csharp_style_conditional_delegate_call = true:suggestion

# Other features
csharp_style_prefer_index_operator = false:none
csharp_style_prefer_range_operator = false:none
csharp_style_pattern_local_over_anonymous_function = false:none

# TODO: Move those rules to its own global AnalyzerConfig files.
# https://learn.microsoft.com/en-us/dotnet/fundamentals/code-analysis/configuration-files
# Enable a subset of code-style analysis on build
# https://docs.microsoft.com/en-us/dotnet/fundamentals/code-analysis/overview
dotnet_diagnostic.CA1018.severity = warning     # CA1018: Mark attributes with AttributeUsageAttribute.
dotnet_diagnostic.CA1047.severity = warning     # CA1047: Do not declare protected member in sealed type.
dotnet_diagnostic.CA1305.severity = suggestion  # CA1305: Specify IFormatProvider.
dotnet_diagnostic.CA1507.severity = warning     # CA1507: Use nameof to express symbol names.
dotnet_diagnostic.CA1725.severity = suggestion  # CA1725: Parameter names should match base declaration.
dotnet_diagnostic.CA1802.severity = warning     # CA1802: Use literals where appropriate.
dotnet_diagnostic.CA1805.severity = warning     # CA1805: Do not initialize unnecessarily.
dotnet_diagnostic.CA1810.severity = suggestion  # CA1810: Do not initialize unnecessarily.
dotnet_diagnostic.CA1821.severity = warning     # CA1821: Remove empty Finalizers.
dotnet_diagnostic.CA1822.severity = suggestion  # CA1822: Make member static.
dotnet_diagnostic.CA1823.severity = warning     # CA1823: Avoid unused private fields.
dotnet_diagnostic.CA1825.severity = warning     # CA1825: Avoid zero-length array allocations.
dotnet_diagnostic.CA1826.severity = warning     # CA1826: Do not use Enumerable methods on indexable collections. Instead use the collection directly.
dotnet_diagnostic.CA1827.severity = warning     # CA1827: Do not use Count() or LongCount() when Any() can be used
dotnet_diagnostic.CA1828.severity = warning     # CA1828: Do not use CountAsync() or LongCountAsync() when AnyAsync() can be used
dotnet_diagnostic.CA1829.severity = warning     # CA1829: Use Length/Count property instead of Count() when available
dotnet_diagnostic.CA1830.severity = warning     # CA1830: Prefer strongly-typed Append and Insert method overloads on StringBuilder
dotnet_diagnostic.CA1831.severity = warning     # CA1831: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1832.severity = warning     # CA1832: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1833.severity = warning     # CA1833: Use AsSpan or AsMemory instead of Range-based indexers when appropriate
dotnet_diagnostic.CA1834.severity = warning     # CA1834: Consider using 'StringBuilder.Append(char)' when applicable
dotnet_diagnostic.CA1835.severity = warning     # CA1835: Prefer the 'Memory'-based overloads for 'ReadAsync' and 'WriteAsync'
dotnet_diagnostic.CA1836.severity = warning     # CA1836: Prefer IsEmpty over Count
dotnet_diagnostic.CA1837.severity = warning     # CA1837: Use 'Environment.ProcessId'
dotnet_diagnostic.CA1838.severity = warning     # CA1838: Avoid 'StringBuilder' parameters for P/Invokes
dotnet_diagnostic.CA1839.severity = warning     # CA1839: Use 'Environment.ProcessPath'
dotnet_diagnostic.CA1840.severity = warning     # CA1840: Use 'Environment.CurrentManagedThreadId'
dotnet_diagnostic.CA1841.severity = warning     # CA1841: Prefer Dictionary.Contains methods
dotnet_diagnostic.CA1842.severity = warning     # CA1842: Do not use 'WhenAll' with a single task
dotnet_diagnostic.CA1843.severity = warning     # CA1843: Do not use 'WaitAll' with a single task
dotnet_diagnostic.CA1845.severity = warning     # CA1845: Use span-based 'string.Concat'
dotnet_diagnostic.CA1846.severity = warning     # CA1846: Prefer AsSpan over Substring
dotnet_diagnostic.CA2008.severity = warning     # CA2008: Do not create tasks without passing a TaskScheduler
dotnet_diagnostic.CA2009.severity = warning     # CA2009: Do not call ToImmutableCollection on an ImmutableCollection value
dotnet_diagnostic.CA2011.severity = warning     # CA2011: Avoid infinite recursion
dotnet_diagnostic.CA2012.severity = warning     # CA2012: Use ValueTask correctly
dotnet_diagnostic.CA2013.severity = warning     # CA2013: Do not use ReferenceEquals with value types
dotnet_diagnostic.CA2014.severity = warning     # CA2014: Do not use stackalloc in loops.
dotnet_diagnostic.CA2016.severity = warning     # CA2016: Forward the 'CancellationToken' parameter to methods that take one
dotnet_diagnostic.CA2200.severity = warning     # CA2200: Rethrow to preserve stack details
dotnet_diagnostic.CA2208.severity = warning     # CA2208: Instantiate argument exceptions correctly
dotnet_diagnostic.IDE0020.severity = warning    # IDE0020: Use pattern matching to avoid is check followed by a cast (with variable)
dotnet_diagnostic.IDE0029.severity = warning    # IDE0029: Use coalesce expression
dotnet_diagnostic.IDE0031.severity = warning    # IDE0031: Use null propagation
dotnet_diagnostic.IDE0035.severity = warning    # IDE0035: Remove unreachable code
dotnet_diagnostic.IDE0036.severity = warning    # IDE0036: Order modifiers
dotnet_diagnostic.IDE0043.severity = warning    # IDE0043: Format string contains invalid placeholder
dotnet_diagnostic.IDE0044.severity = warning    # IDE0044: Make field readonly
dotnet_diagnostic.IDE0200.severity = warning    # IDE0200: Remove unnecessary lambda expression.
dotnet_diagnostic.IDE0210.severity = suggestion # IDE0210: Use top-level statements

# Json
[*.json]
indent_size = 2

# Markdown
[*.md]
max_line_length = off
trim_trailing_whitespace = false

# Scripts
[*.{cmd, bat}]
end_of_line = crlf
indent_size = 2

[*.ps1]
indent_size = 2

[*.sh]
end_of_line = lf
indent_size = 2

# Yaml
[*.{yml,yaml}]
indent_style = space
indent_size = 2